# Chunk 39
# Set working directory
setwd("~/Documents/Research/PhageHostPrediction/PostThesis/Data/Sequences/HostSequences/")
# The sequences for the hosts where divided into different folders (needed for tRNA predictions). Make a vector of folders to be loaded
vec_folders <- list.files(pattern = "HostFolder")
# Create list where the sequences will be stored in
count <- 0
for(i in 1:length(vec_folders)){
reset_dir <- getwd()
new_dir <- str_c(getwd(), "/", vec_folders[i])
setwd(new_dir)
count <- count + length(list.files())
setwd(reset_dir)
}
list_hostSequences <- vector(mode = "list", length = count)
tracker <- 0
for(i in 1:length(vec_folders)){
reset_dir <- getwd()
new_dir <- str_c(getwd(), "/", vec_folders[i])
setwd(new_dir)
vec_hostsequence_name <- list.files()
for(j in 1:length(vec_hostsequence_name)){
tracker <- tracker + 1
cat("Host sequence being loaded now is", vec_hostsequence_name[j], "in this location", tracker, "\n")
list_hostSequences[[tracker]] <- as.SeqFastadna(read.fasta(file = vec_hostsequence_name[j], as.string = FALSE, forceDNAtolower = FALSE, seqonly = TRUE, strip.desc = FALSE))
new_name <- str_extract(vec_hostsequence_name[j], "GCF_\\d*.\\d")
print(new_name)
names(list_hostSequences)[[tracker]] <- new_name
}
setwd(reset_dir)
}
# Replace the names of the list by their host range equivalent
to_remove <- vector(mode = "character")
for(i in 1:length(list_hostSequences)){
curr_name <- names(list_hostSequences)[[i]]
temp_subset <- dt_TagHost[which(dt_TagHost$RefSeq.assembly.accession == curr_name), ]
test <- temp_subset
if(nrow(temp_subset) != 1){
to_remove <- append(to_remove, curr_name)
next
} else {
names(list_hostSequences)[[i]] <- temp_subset$Tag
}
}
library(rlist)
list_hostSequences <- list.remove(list_hostSequences, to_remove)
# Chunk 40
HR_hostSeqAvail <- hostrange_inf_matrix[names(list_hostSequences), ] #worked
dim(HR_hostSeqAvail)
# Set working directory
setwd("~/Documents/Research/PhageHostPrediction/PostThesis/Data/Sequences/SingleSeqPerFile/")
# Store phage sequences in a list
file_names <- list.files()
list_phageSequences <- vector(mode = "list", length = length(file_names))
for(i in 1:length(list_phageSequences)){
list_phageSequences[[i]] <- as.SeqFastadna(read.fasta(file = file_names[i], as.string = FALSE, forceDNAtolower = FALSE, seqonly = TRUE, strip.desc = FALSE))
}
vec_HR_phage <- colnames(HR_hostSeqAvail)
list_phageSequences <- list_phageSequences[vec_HR_phage]
vec_phagename <- colnames(HR_hostSeqAvail)
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:nrow(vec_events)){
curr_phage <- vec_phagename[i]
sumInf <- HR_hostSeqAvail[]
}
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
#sumInf <- HR_hostSeqAvail[]
}
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
print(curr_phage)
#sumInf <- HR_hostSeqAvail[]
}
vec_phagename <- colnames(HR_hostSeqAvail)
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
sumInf <- HR_hostSeqAvail["Inf"]
sunNoInf <- HR_hostSeqAvail["NoInf"]
sumInf
}
vec_phagename <- colnames(HR_hostSeqAvail)
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
sumInf <- as.matrix(HR_hostSeqAvail["Inf"])
sunNoInf <- as.matrix(HR_hostSeqAvail["NoInf"])
sumInf
}
class(HR_hostSeqAvail)
test <- as.matrix(HR_hostSeqAvail)
test
test["Inf"]
test == "Inf"
HR_hostSeqAvail == "Inf"
vec_phagename <- colnames(HR_hostSeqAvail)
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
sumInf <- sum(HR_hostSeqAvail == "Inf")
sunNoInf <- sum(HR_hostSeqAvail == "NoInf")
vec_events[i] <- sumInf + sumNoInf
}
vec_events
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
sumInf <- sum(HR_hostSeqAvail == "Inf")
sunNoInf <- sum(HR_hostSeqAvail == "NoInf")
print(sumInf)
vec_events[i] <- sumInf + sumNoInf
}
HR_hostSeqAvail == "Inf"
sum(HR_hostSeqAvail == "Inf")
sum(HR_hostSeqAvail == "Inf", na.rm = TRUE)
vec_phagename <- colnames(HR_hostSeqAvail)
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
sumInf <- sum(HR_hostSeqAvail == "Inf", na.rm = TRUE)
sunNoInf <- sum(HR_hostSeqAvail == "NoInf", na.rm = TRUE)
vec_events[i] <- sumInf + sumNoInf
}
vec_events
vec_phagename <- colnames(HR_hostSeqAvail)
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
vec_infection <- HR_hostSeqAvail[ , curr_phage]
print(length(vec_infection))
}
vec_phagename <- colnames(HR_hostSeqAvail)
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
vec_infection <- HR_hostSeqAvail[ , curr_phage]
sumInf <- sum(vec_infection == "Inf")
sumNoInf <- sum(vec_infection == "NoInf")
vec_events[i] <- sumInf + sumNoInf
}
vec_events
vec_phagename <- colnames(HR_hostSeqAvail)
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
vec_infection <- HR_hostSeqAvail[ , curr_phage]
sumInf <- sum(vec_infection == "Inf", na.rm = TRUE)
sumNoInf <- sum(vec_infection == "NoInf", na.rm = TRUE)
vec_events[i] <- sumInf + sumNoInf
}
vec_events
dt_phage_events <- data.frame(vec_phagename, vec_events)
colnames(dt_phage_events) <- c("PhageAcc", "Events")
dt_phage_events
vec_phagename <- colnames(HR_hostSeqAvail)
vec_sumInf <- vector(mode = "double", length = length(vec_phagename))
vec_sumNoInf <- vector(mode = "double", length = length(vec_phagename))
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
vec_infection <- HR_hostSeqAvail[ , curr_phage]
sumInf <- sum(vec_infection == "Inf", na.rm = TRUE)
sumNoInf <- sum(vec_infection == "NoInf", na.rm = TRUE)
vec_sumInf[i] <- sumInf
vec_sumNoInf[i] <- sumNoInf
vec_events[i] <- sumInf + sumNoInf
}
dt_phage_events <- data.frame(vec_phagename, vec_sumInf, vec_sumNoInf, vec_events)
colnames(dt_phage_events) <- c("PhageAcc", "NumberInf", "NumberNoInf", "TotalEvents")
dt_phage_events
# Subset the dataframe by number of events. In this case, I want at least 1 successful infection AND 1 non successful infection.
dt_phage_events_subset <- dt_phage_events[which(dt_phage_events$NumberInf >=1), ]
dt_phage_events_subset
# Subset the dataframe by number of events. In this case, I want at least 1 successful infection AND 1 non successful infection.
dt_phage_events_subset <- dt_phage_events[which(dt_phage_events$NumberInf >= 1) && which(dt_phage_events$NumberNoInf >= 1), ]
dt_phage_events_subset
vec_phagename <- colnames(HR_hostSeqAvail)
vec_sumInf <- vector(mode = "double", length = length(vec_phagename))
vec_sumNoInf <- vector(mode = "double", length = length(vec_phagename))
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
vec_infection <- HR_hostSeqAvail[ , curr_phage]
sumInf <- sum(vec_infection == "Inf", na.rm = TRUE)
sumNoInf <- sum(vec_infection == "NoInf", na.rm = TRUE)
vec_sumInf[i] <- sumInf
vec_sumNoInf[i] <- sumNoInf
vec_events[i] <- sumInf + sumNoInf
}
dt_phage_events <- data.frame(vec_phagename, vec_sumInf, vec_sumNoInf, vec_events)
colnames(dt_phage_events) <- c("PhageAcc", "NumberInf", "NumberNoInf", "TotalEvents")
# Subset the dataframe by number of events. In this case, I want at least 1 successful infection AND 1 non successful infection.
dt_phage_events_subset <- dt_phage_events[which(dt_phage_events$NumberInf >= 1) && which(dt_phage_events$NumberNoInf >= 1), ]
dt_phage_events_subset
vec_phagename <- colnames(HR_hostSeqAvail)
vec_sumInf <- vector(mode = "double", length = length(vec_phagename))
vec_sumNoInf <- vector(mode = "double", length = length(vec_phagename))
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
vec_infection <- HR_hostSeqAvail[ , curr_phage]
sumInf <- sum(vec_infection == "Inf", na.rm = TRUE)
sumNoInf <- sum(vec_infection == "NoInf", na.rm = TRUE)
vec_sumInf[i] <- sumInf
vec_sumNoInf[i] <- sumNoInf
vec_events[i] <- sumInf + sumNoInf
}
dt_phage_events <- data.frame(vec_phagename, vec_sumInf, vec_sumNoInf, vec_events)
colnames(dt_phage_events) <- c("PhageAcc", "NumberInf", "NumberNoInf", "TotalEvents")
# Subset the dataframe by number of events. In this case, I want at least 1 successful infection AND 1 non successful infection.
dt_phage_events_subset <- dt_phage_events[which(dt_phage_events$NumberInf >= 1 && dt_phage_events$NumberNoInf >= 1), ]
dt_phage_events
vec_phagename <- colnames(HR_hostSeqAvail)
vec_sumInf <- vector(mode = "double", length = length(vec_phagename))
vec_sumNoInf <- vector(mode = "double", length = length(vec_phagename))
vec_events <- vector(mode = "double", length = length(vec_phagename))
for(i in 1:length(vec_events)){
curr_phage <- vec_phagename[i]
vec_infection <- HR_hostSeqAvail[ , curr_phage]
sumInf <- sum(vec_infection == "Inf", na.rm = TRUE)
sumNoInf <- sum(vec_infection == "NoInf", na.rm = TRUE)
vec_sumInf[i] <- sumInf
vec_sumNoInf[i] <- sumNoInf
vec_events[i] <- sumInf + sumNoInf
}
dt_phage_events <- data.frame(vec_phagename, vec_sumInf, vec_sumNoInf, vec_events)
colnames(dt_phage_events) <- c("PhageAcc", "NumberInf", "NumberNoInf", "TotalEvents")
# Subset the dataframe by number of events. In this case, I want at least 1 successful infection AND 1 non successful infection.
dt_phage_events_subset <- dt_phage_events[which(dt_phage_events$NumberInf >= 1 & dt_phage_events$NumberNoInf >= 1), ]
dt_phage_events_subset
nrow(dt_phage_events_subset)
# Subset host range matrix to only hold the infection/non infections values between the phage and the host
HR_NC_007734 <- HR_hostSeqAvail[ , "NC_007734"]
HR_NC_007734
# Subset host range matrix to only hold the infection/non infections values between the phage and the host
HR_NC_007734 <- as.matrix(HR_hostSeqAvail[ , "NC_007734"])
rownames(HR_NC_007734) <- rownames(HR_hostSeqAvail)
HR_NC_007734
case_noInf <- rownames(HR_NC_007734 == "NoInf")
case_noInf
HR_NC_007734
case_Inf <- "bacil_anthracis_1"
case_noInf <- "bacil_cereus_1"
# Chunk 1: setwd_and_loadpackages
# Set working directory
setwd("~/Documents/Research/CodonAnalysis_PSA_Phages/")
# Load libraries
library(ggplot2)
library(seqinr)
library(dplyr)
library(forcats)
library(reshape2)
library(Biostrings)
library(DT)
library(lsa)
library(gridExtra)
# The following code makes teh title aligned in the center for all graphs:
theme_update(plot.title = element_text(hjust = 0.5))
# Chunk 2: load_sequences
# Set working directory
setwd("~/Documents/Research/CodonAnalysis_PSA_Phages/Sequences/")
# Load the sequences (seqinr functions)
seq_PSA <- as.SeqFastadna(read.fasta(file = "PSA_1315_PacBio_final.assembly.fasta", as.string = FALSE, forceDNAtolower = FALSE, seqonly = FALSE, strip.desc = FALSE))
seq_PSA_chr1 <- seq_PSA[[1]]
seq_PSA_chr2 <- seq_PSA[[2]]
seq_HP1 <- as.SeqFastadna(read.fasta(file = "HP1_2582581228.fna", as.string = FALSE, forceDNAtolower = FALSE, seqonly = FALSE, strip.desc = FALSE))
seq_HP1 <- seq_HP1[[1]]
seq_HS2 <- read.fasta(file = "HS2_2582581232.fna", as.string = FALSE, forceDNAtolower = FALSE, seqonly = FALSE, strip.desc = FALSE)
seq_HS2 <- seq_HS2[[1]]
# Chunk 3: compute_uco
# uco for the host
uco_PSA_chr1 <- uco(seq_PSA_chr1, as.data.frame = TRUE)
uco_PSA_chr2 <- uco(seq_PSA_chr2, as.data.frame = TRUE)
# uco for the phages
uco_HP1 <- uco(seq_HP1, as.data.frame = TRUE)
uco_HS2 <- uco(seq_HS2, as.data.frame = TRUE)
# Add new colums to each of them
uco_PSA_chr1["org"] <- "PSA_chr1"
uco_PSA_chr2["org"] <- "PSA_chr2"
uco_HP1["org"] <- "HP1"
uco_HS2["org"] <- "HS2"
# Combine
uco_all <- rbind(uco_PSA_chr1, uco_PSA_chr2, uco_HP1, uco_HS2)
# Create amino acids to codon table
dt_aa_codon <- uco_PSA_chr1[ , 1:2]
# Chunk 4: RSCU_matrix
# Initialize empty matrix with correct dimensions
uco_matrix <- matrix(NA, nrow = 64, ncol = 4)
rownames(uco_matrix) <- rownames(uco_all[1:64, ])
colnames(uco_matrix) <- c("HS2", "HP1", "PSA_chr2", "PSA_chr1")
for(i in 1:ncol(uco_matrix)){
# Subset original dataframe by organism
temp_subset <- uco_all[which(uco_all$org == colnames(uco_matrix)[i]), ]
# Populate matrix
for(j in 1:nrow(uco_matrix)){
uco_matrix[j, i] <- temp_subset$RSCU[j]
}
}
# Chunk 5
# Reorder factor levels
uco_all$codon <- reorder(uco_all$codon, uco_all$RSCU, FUN = mean)
# Plot
ggplot(data = uco_all) +
geom_point(mapping = aes(x = RSCU, y = codon, color = org), size = 2, alpha = 0.8) +
scale_color_manual(values = c("HP1" = "orange", "HS2" = "blue", "PSA_chr2" = "grey", "PSA_chr1" = "black")) +
labs(
x = "RSCU",
y = "Codon",
title = "Codon biases in PSA and its phages"
)
# Chunk 6: matrix_RSCU_comparison
# Initialize matrix comparison
uco_matrix_comparison <- matrix(NA, nrow = 64, ncol = 3)
rownames(uco_matrix_comparison) <- rownames(uco_matrix)
colnames(uco_matrix_comparison) <- c("HS2", "HP1", "PSA_chr2")
for(i in 1:ncol(uco_matrix_comparison)){
diff <- uco_matrix[, "PSA_chr1"] - uco_matrix[ , i]
uco_matrix_comparison[ , i] <- diff
}
# Convert matrix comparison to a dataframe
uco_dt_comparison <- as.data.frame(t(uco_matrix_comparison))
uco_dt_comparison["Org"] <- rownames(uco_dt_comparison)
# Melt dataframe
melted_uco_dt_comparison <- melt(uco_dt_comparison)
# Add amino acids information
melted_uco_dt_comparison["aa"] <- NA
for(i in 1:nrow(melted_uco_dt_comparison)){
curr_codon <- melted_uco_dt_comparison$variable[i]
amino_acid <- as.character(dt_aa_codon$AA[which(dt_aa_codon$codon == curr_codon)])
melted_uco_dt_comparison$aa[i] <- amino_acid
}
# Chunk 7
# Plot of the differences
ggplot(data = melted_uco_dt_comparison, mapping = aes(x = Org, y = value)) +
geom_boxplot() +
theme(axis.title.x = element_blank()) +
labs(
y = "RSCU Difference",
title = "RSCU Difference of HP1, HS2 and PSA chr 2 against PSA chr 1"
)
# Chunk 8
### HP1
# Subset dataframe
HP1_melted_uco <- as.data.frame(melted_uco_dt_comparison[which(melted_uco_dt_comparison$Org == "HP1"), ])
# Determine the quantiles for HP1
HP1_quant <- quantile(HP1_melted_uco$value, probs = seq(0, 1, 0.05))
# Subset by 5% and 95% quantiles values
HP1_qtile5 <- as.numeric(HP1_quant["5%"])
HP1_qtile95 <- as.numeric(HP1_quant["95%"])
HP1_subset5 <- HP1_melted_uco[which(HP1_melted_uco$value < HP1_qtile5), ]
HP1_subset95 <- HP1_melted_uco[which(HP1_melted_uco$value > HP1_qtile95), ]
# Interactive datatable
datatable(HP1_melted_uco, class = 'cell-border stripe', rownames = FALSE)
### HS2
# Subset dataframe
HS2_melted_uco <- as.data.frame(melted_uco_dt_comparison[which(melted_uco_dt_comparison$Org == "HS2"), ])
# Determine the quantiles for HS2
HS2_quant <- quantile(HS2_melted_uco$value, probs = seq(0, 1, 0.05))
# Subset by 5% and 95% quantiles values
HS2_qtile5 <- as.numeric(HS2_quant["5%"])
HS2_qtile95 <- as.numeric(HS2_quant["95%"])
HS2_subset5 <- HS2_melted_uco[which(HS2_melted_uco$value < HS2_qtile5), ]
HS2_subset95 <- HS2_melted_uco[which(HS2_melted_uco$value > HS2_qtile95), ]
# Interactive databale
datatable(HS2_melted_uco, class = 'cell-border stripe', rownames = FALSE)
# Chunk 9
# Combine quantile dataframes
HP1_outliers <- rbind(HP1_subset5, HP1_subset95)
HS2_outliers <- rbind(HS2_subset5, HS2_subset95)
# Add a new column to the meled_uco dataframe that contains the outliers information # TO DO
melted_uco_dt_comparison["Outliers"] <- NA
for(i in 1:nrow(HP1_outliers)){
curr_value <- HP1_outliers$value[i]
melted_uco_dt_comparison$Outliers[melted_uco_dt_comparison$value == curr_value] <- "outlier"
}
for(i in 1:nrow(HS2_outliers)){
curr_value <- HS2_outliers$value[i]
melted_uco_dt_comparison$Outliers[melted_uco_dt_comparison$value == curr_value] <- "outlier"
}
# Reorder levevls from smallest difference to highest difference for HP1
melted_uco_dt_comparison$variable <- reorder(melted_uco_dt_comparison$variable, melted_uco_dt_comparison$value)
melted_uco_dt_comparison$aa <- reorder(melted_uco_dt_comparison$aa, melted_uco_dt_comparison$value, FUN = mean)
# Create function to pick condition for ggplotting
pick <- function(condition){
function(d) d %>% filter_(condition)
}
# Levels
levels1 <- levels(melted_uco_dt_comparison$variable)
levels2 <- levels(melted_uco_dt_comparison$aa)
# Plot
ggplot(data = melted_uco_dt_comparison, mapping = aes(x = variable, y = value, color = Org)) +
# All dots
geom_point(size = 2) +
# Outliers for HS2 and HP1
geom_point(data = pick(~Outliers == "outlier"), color = "black", shape = 1, size = 4) +
scale_color_manual(values = c("HP1" = "orange", "HS2" = "blue", "PSA_chr2" = "grey")) +
coord_flip() +
labs(
x = "Codon",
y = "RSCU Difference (against PSA Chromosome 1)",
title = "RSCU Difference with circled outliers"
)
# Chunk 10
# Compute cosine similarity
lsa_HS2_chr1 <- cosine(uco_matrix[ , "HS2"], uco_matrix[ , "PSA_chr1"])
lsa_HP1_chr1 <- cosine(uco_matrix[ , "HP1"], uco_matrix[ , "PSA_chr1"])
lsa_chr2_chr1 <- cosine(uco_matrix[ , "PSA_chr1"], uco_matrix[ , "PSA_chr2"])
lsa_chr1_chr1 <- cosine(uco_matrix[ , "PSA_chr1"], uco_matrix[ , "PSA_chr1"])
# Print results
lsa_HS2_chr1
lsa_HP1_chr1
lsa_chr2_chr1
lsa_chr1_chr1
# Chunk 11
### HP1
# Initialize empty matrix
dt_deviate_HP1 <- matrix(NA, nrow = 64, ncol = 1)
rownames(dt_deviate_HP1) <- rownames(uco_matrix)
# Populate matrix
vec_HP1 <- uco_matrix[ , "HP1"]
vec_PSA_chr1 <- uco_matrix[ , "PSA_chr1"]
for(i in 1:nrow(dt_deviate_HP1)){
PSA_chr1_RSCU <- vec_PSA_chr1[i]
vec_HP1[i] <- PSA_chr1_RSCU
cos_comparison <- cosine(vec_HP1, vec_PSA_chr1)
# Store value
dt_deviate_HP1[i, 1] <- cos_comparison
# Reset vectors
vec_HP1 <- uco_matrix[ , "HP1"]
}
colnames(dt_deviate_HP1) <- c("value")
dt_deviate_HP1 <- as.data.frame(dt_deviate_HP1)
# Add a codon and an amino acid columns in the dataframe
dt_deviate_HP1["codon"] <- dt_aa_codon$codon
dt_deviate_HP1["aa"] <- NA
for(i in 1:nrow(dt_deviate_HP1)){
curr_codon <- dt_deviate_HP1$codon[i]
amino_acid <- as.character(dt_aa_codon$AA[which(dt_aa_codon$codon == curr_codon)])
dt_deviate_HP1$aa[i] <- amino_acid
}
### HS2
# Initialize empty matrix
dt_deviate_HS2 <- matrix(NA, nrow = 64, ncol = 1)
rownames(dt_deviate_HS2) <- rownames(uco_matrix)
# Populate matrix
vec_HS2 <- uco_matrix[ , "HS2"]
vec_PSA_chr1 <- uco_matrix[ , "PSA_chr1"]
for(i in 1:nrow(dt_deviate_HS2)){
PSA_chr1_RSCU <- vec_PSA_chr1[i]
vec_HS2[i] <- PSA_chr1_RSCU
cos_comparison <- cosine(vec_HS2, vec_PSA_chr1)
# Store value
dt_deviate_HS2[i, 1] <- cos_comparison
# Reset vectors
vec_HS2 <- uco_matrix[ , "HS2"]
}
colnames(dt_deviate_HS2) <- c("value")
dt_deviate_HS2 <- as.data.frame(dt_deviate_HS2)
# Add a codon and an amino acid columns in the dataframe
dt_deviate_HS2["codon"] <- dt_aa_codon$codon
dt_deviate_HS2["aa"] <- NA
for(i in 1:nrow(dt_deviate_HS2)){
curr_codon <- dt_deviate_HS2$codon[i]
amino_acid <- as.character(dt_aa_codon$AA[which(dt_aa_codon$codon == curr_codon)])
dt_deviate_HS2$aa[i] <- amino_acid
}
# Compute difference in cosine similarity between the dt_deviate dataframes against the initial cosine similarity
dt_deviate_HP1["Org"] <- "HP1"
dt_deviate_HS2["Org"] <- "HS2"
HP1_diff <-  as.numeric(lsa_HP1_chr1) - dt_deviate_HP1$value
dt_deviate_HP1$value <- HP1_diff
HS2_diff <-  as.numeric(lsa_HS2_chr1) - dt_deviate_HS2$value
dt_deviate_HS2$value <- HS2_diff
RSCU_comparison_diff <- rbind(dt_deviate_HP1, dt_deviate_HS2)
# Add a new column to hold the frequency values of each codon (useful for plot to come)
freq_HP1_HS2 <- c(uco_HP1$freq, uco_HS2$freq)
RSCU_comparison_diff["Frequency"] <- freq_HP1_HS2
# Chunk 12
# Plot
ggplot(data = RSCU_comparison_diff, mapping = aes(x = codon, y = value, color = Org, size = Frequency)) +
geom_point(alpha = 0.7) +
coord_flip()
# Chunk 13
# Plot
ggplot(data = RSCU_comparison_diff, mapping = aes(x = aa, y = value, color = Org, size = Frequency)) +
geom_point(alpha = 0.7) +
coord_flip()
# Chunk 14
# Plot
ggplot(data = RSCU_comparison_diff, mapping = aes(x = aa, y = value, color = Org)) +
geom_boxplot() +
coord_flip() +
labs(
x = "Difference",
y = "Amino acids",
title = "Boxplot (not weighted)"
)
list_hostSequences
# Retrieve the sequences
case_Inf_seq <- list_hostSequences[[case_inf]]
# Record which host are infection and non infection cases
case_Inf <- "bacil_anthracis_1"
# Retrieve the sequences
case_Inf_seq <- list_hostSequences[[case_Inf]]
case_Inf_seq
names(list_hostSequences)
HR_NC_007734
# Record which host are infection and non infection cases
case_Inf <- "bacil_anthracis_2"
# Retrieve the sequences
case_Inf_seq <- list_hostSequences[[case_Inf]]
case_Inf_seq
